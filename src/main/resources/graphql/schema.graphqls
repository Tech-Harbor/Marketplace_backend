scalar LocalTimeDate

type Query {
    getByIdUser(id: ID): UserDTO
    getByIdCategory(id: ID): CategoryDTO
    getAllOrder: [OrderDTO]
    getAllUsers: [UserDTO]
    getAllProducts: [ProductDTO]
    getByIdProduct(id: ID!): ProductDTO
    getAllComments: [CommentDTO]
}

type Mutation {
    createProductIdByUser(userId: ID!, entity: ProductInput): ProductDTO
    updateByIdUser(id: ID!, entity: UserInput): UserDTO
}

input UserInput {
    id: ID
    lastname: String
    firstname: String
    phone: String
    email: String
    password: String
    product: [ProductInput]
    status: RegisterAuthStatus
    role: [Role]
}

type CategoryDTO {
    id: ID
    categoryName: String
    product: [ProductDTO]
}

type ProductDTO {
    id: ID
    name: String
    descriptionProduct: String
    characteristicProduct: String
    price: Int
    date: LocalTimeDate
    location: String
    images: [ImageDTO]
}

type ImageDTO {
    imageUrl: String
}

type UserDTO {
    id: ID
    lastname: String
    firstname: String
    phone: String
    email: String
    product: [ProductDTO]
    status: RegisterAuthStatus
    role: Role
}

type OrderDTO {
    id: ID
    user: UserDTO
    product: ProductDTO
    status: Status
}

type CommentDTO {
    id: ID
    user: UserDTO
    product: ProductDTO
    text: String
}

input ProductInput {
    name: String!
    descriptionProduct: String!
    characteristicProduct: String
    price: Int!
}

enum Status {
    PENDING
}

enum Role {
    ADMIN, USER
}

enum RegisterAuthStatus {
    GOOGLE, JWT
}